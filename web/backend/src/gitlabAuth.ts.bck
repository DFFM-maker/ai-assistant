import express, { Request, Response } from 'express';
import passport from 'passport';
import session from 'express-session';
import { Strategy as GitLabStrategy } from 'passport-gitlab2';

const CLIENT_ID = 'a3745bcb6294200e3d68cee33c263a26fddea15fd817b36d93595fb7b8c3796c';
const CLIENT_SECRET = 'gloas-e0e92261d75c2e31e3f42b6471433db57804bf18758792c4fd29e0ab75f3bd4d';
const GITLAB_BASE_URL = 'https://gitlab.dffm.it'; // Cambia se il tuo dominio GitLab è diverso.
const CALLBACK_URL = process.env.NODE_ENV === 'production'
  ? 'https://ai-assistant.dffm.it/api/auth/gitlab/callback'
  : 'http://localhost:4000/api/auth/gitlab/callback';

passport.serializeUser((user: any, done: (err: any, id?: any) => void) => {
  done(null, user);
});
passport.deserializeUser((obj: any, done: (err: any, user?: any) => void) => {
  done(null, obj);
});

passport.use(new GitLabStrategy(
  {
    clientID: CLIENT_ID,
    clientSecret: CLIENT_SECRET,
    callbackURL: CALLBACK_URL,
    baseURL: GITLAB_BASE_URL,
    scope: ['read_user'],
  },
  (
    accessToken: string,
    refreshToken: string,
    profile: any,
    done: (error: any, user?: any) => void
  ) => {
    return done(null, {
      id: profile.id,
      username: profile.username,
      name: profile.displayName,
      avatar: profile.avatarUrl,
      accessToken
    });
  }
));

const router = express.Router();

// Sessione
router.use(session({
  secret: 'cambia-questa-stringa-con-una-complessa',
  resave: false,
  saveUninitialized: false,
  cookie: {
    httpOnly: true,
    secure: process.env.NODE_ENV === 'production', // true solo in https
    sameSite: 'lax',
  },
}));

router.use(passport.initialize());
router.use(passport.session());

// Avvia login
router.get('/auth/gitlab', passport.authenticate('gitlab', { scope: ['read_user'] }));

// Callback dopo login
router.get(
  '/auth/gitlab/callback',
  passport.authenticate('gitlab', {
    failureRedirect: '/', // O una pagina di errore custom
    session: true,
  }),
  (req: Request, res: Response) => {
    res.redirect('/'); // o dove vuoi tu
  }
);

// Logout
router.get('/auth/logout', (req: Request, res: Response) => {
  // @ts-ignore: proprietà aggiunta da passport
  req.logout(() => {
    res.redirect('/');
  });
});

// API per sapere chi è loggato
router.get('/user', (req: Request, res: Response) => {
  // @ts-ignore: proprietà aggiunta da passport
  if (req.isAuthenticated() && req.user) {
    res.json(req.user);
  } else {
    res.status(401).json({ error: 'not authenticated' });
  }
});

export default router;
